name: Build Bulldozer Debugging

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch name to pull from the repo for this debugging session"
        default: "recaptime-dev-mainline"
        required: true

jobs:
  debugger:
    name: bulldozer-debugger.gitpodify.dev
    runs-on: ubuntu-latest
    steps:
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1
      - name: Load environment variables as masked secrets
        uses: catchco/doppler-environment-loader@v1.0.2
        with:
          doppler-token: ${{ secrets.DOPPLER_TOKEN }}
      - name: Tailscale setup
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo systemctl start tailscaled || true
          sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTHKEY_BULLDOZER }} --hostname gp-ws-images-bulldozer-gha --advertise-tags="tag:dev,tag:ci"
      
      - name: Checkout from gitpodify/gitpodified-workspace-images
        uses: actions/checkout@v3
        with:
          repository: gitpodify/gitpodified-workspace-images
          ref: ${{ inputs.branch }}
          path: gp-ws-images
      - name: SSH Server Warmup
        run: |
          sudo apt install -yq openssh-server

          if [[ "${RUNNER_OS}" == 'Linux' ]]; then
            chmod 0770 "${HOME}"
          else
            chmod g-w "${HOME}"
          fi
      
          mkdir -p "${HOME}/.ssh"
          chmod 0700 "${HOME}/.ssh"

          wget https://cdn.rtapp.tk/provisioning-api/authorized_keys/dev-ci -O ~/.ssh/authorized_keys
          chmod 0600 "${HOME}/.ssh/authorized_keys"

          ssh-keygen -A

          sudo sed -i.bak 's/^#PasswordAuthentication .*/PasswordAuthentication no/' /etc/ssh/sshd_config
          sudo sed -i.bak 's/^PasswordAuthentication .*/PasswordAuthentication no/' /etc/ssh/sshd_config
          sudo sed -i.bak 's/^#PubkeyAuthentication .*/PubkeyAuthentication yes/' /etc/ssh/sshd_config
          sudo sed -i.bak 's/^PubkeyAuthentication .*/PubkeyAuthentication yes/' /etc/ssh/sshd_config

          sudo systemctl start sshd
      - name: 🔧 .gitlab/ci/scripts/ci-setup
        run: |
          sudo apt-get install python3-pip shellcheck uuid-runtime
          curl -sSL https://github.com/mvdan/sh/releases/download/v3.4.2/shfmt_v3.4.2_linux_amd64 -o shfmt
          sudo mv shfmt /usr/local/bin/shfmt && sudo chmod +x /usr/local/bin/shfmt
          sudo pip3 install pre-commit yq

      - name: 🤓 pre-commit
        run: |
          pre-commit run --all-files
        working-directory: gp-ws-images
        continue-on-error: true

      - name: 🔆 Install dazzle
        run: |
          curl -sSL https://github.com/gitpod-io/dazzle/releases/download/v0.1.6/dazzle_0.1.6_Linux_x86_64.tar.gz | sudo tar -xvz -C /usr/local/bin

      - name: 🔆 Setup CI Systems
        run: |
          echo "====> Installing Skopeo...."
          . /etc/os-release
          # Update ca-certificates to avoid issues with LetEncr SSL certificates
          sudo apt update && sudo apt --only-upgrade install ca-certificates -y
          echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
          curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key | sudo apt-key add -
          sudo apt update && sudo apt install -y skopeo

          echo "====> Setting up Buildkitd..."
          curl -sSL https://github.com/moby/buildkit/releases/download/v0.9.3/buildkit-v0.9.3.linux-amd64.tar.gz | sudo tar xvz -C /usr
          sudo buildkitd --oci-worker=true --oci-worker-net=host --debug --group docker &
          sudo su -c "while ! test -S /run/buildkit/buildkitd.sock; do sleep 0.1; done"
          sudo chmod +777 /run/buildkit/buildkitd.sock

      # A hack as GH action does not allow you to force override cache storing if there was a cache hit
      # https://github.com/actions/cache/issues/628#issuecomment-986118455
      - name: 🗄️ Force override GitHub Actions cache
        uses: actions/cache@v2
        with:
          path: ~/registry
          key: ${{ runner.os }}-main-cache-${{ github.sha }}

      - name: 🗄️ Restore Registry Cache
        uses: actions/cache@v2
        with:
          path: ~/registry
          key: ${{ runner.os }}-main-cache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-main-cache-

      - name: 📦 Setup local registry
        run: |
          docker run -it --detach --publish 5000:5000 --volume ~/registry:/var/lib/registry registry:2
        continue-on-error: true

      - name: 🔨 dazzle-buildkit.pipelines.recaptime.dev
        run: |
          ./dazzle-up.sh
        working-directory: gp-ws-images
        continue-on-error: true # Needed to keep our debugging session up for a bit.

      - name: ✍🏽 Authenicate against GHCR, Quay.io and Cloudsmith
        run: |
          echo "===> Authenicating against GHCR"
          sudo skopeo login -u RecapTimeBot --password=${{ secrets.GHCR_SERVICE_ACCOUNT_PASSWORD }} https://${{env.GHCR_REGISTRY}}
          echo
          sleep 3

          echo "===> Authenicating against RHQCR"
          sudo skopeo login -u ${{ secrets.RHQCR_SERVICE_ACCOUNT_USERNAME }} --password=${{secrets.RHQCR_SERVICE_ACCOUNT_PASSWORD}} https://${{env.RHQCR_REGISTRY}}

          echo "===> Authenticating against Cloudsmith"
          sudo skopeo login -u recaptimebot --password=${{secrets.CLOUDSMITH_API_KEY}} https://docker.cloudsmith.io
        continue-on-error: true

      - name: Standby mode
        continue-on-error: true
        run: |
          while ! test -f /tmp/stop; do
            echo "To stop the server and make this job stop successful, run the following on your SSH session: 'touch /tmp/stop && exit'"
            sleep 30
          done
      - name: Pre-shutdown
        run: sleep 10 && echo Bye
